/*
 *  WARNING: THIS FILE IS AUTO-GENERATED. CHANGES WILL BE OVERWRITTEN.
 *  Generated at 2020-09-06 13:36:56
 *  Generated by https://github.com/johndoe31415/mcuconfig
 */

/**
 *	mcuconfig - Generation of microcontroller build setups.
 *	Copyright (C) 2019-2020 Johannes Bauer
 *
 *	This file is part of mcuconfig.
 *
 *	mcuconfig is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; this program is ONLY licensed under
 *	version 3 of the License, later versions are explicitly excluded.
 *
 *	mcuconfig is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with mcuconfig; if not, write to the Free Software
 *	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *	Johannes Bauer <JohannesBauer@gmx.de>
**/

#ifndef __STM32_F103_SYSTEM_H__
#define __STM32_F103_SYSTEM_H__

#include <stm32f10x_gpio.h>

// rs232_tx: PA9, mode = OutputPushPull, alternate function USART1
#define rs232_tx_PORT				GPIOA
#define rs232_tx_PIN				9
#define rs232_tx_MASK				(1 << rs232_tx_PIN)
#define rs232_tx_set_high()		rs232_tx_PORT->BSRR = rs232_tx_MASK
#define rs232_tx_set_low()		rs232_tx_PORT->BRR = rs232_tx_MASK
#define rs232_tx_set_active()		rs232_tx_set_high()
#define rs232_tx_set_inactive()	rs232_tx_set_low()
#define rs232_tx_toggle()			rs232_tx_PORT->ODR ^= rs232_tx_MASK
#define rs232_tx_get()			((rs232_tx_PORT->IDR >> rs232_tx_PIN) & 1)
#define rs232_tx_is_high()		(rs232_tx_get() != 0)
#define rs232_tx_is_low()			(rs232_tx_get() == 0)
#define rs232_tx_is_active()		rs232_tx_is_high()
#define rs232_tx_is_inactive()	rs232_tx_is_low()

// rs232_rx: PA10, mode = InputFloat, alternate function USART1
#define rs232_rx_PORT				GPIOA
#define rs232_rx_PIN				10
#define rs232_rx_MASK				(1 << rs232_rx_PIN)
#define rs232_rx_get()			((rs232_rx_PORT->IDR >> rs232_rx_PIN) & 1)
#define rs232_rx_is_high()		(rs232_rx_get() != 0)
#define rs232_rx_is_low()			(rs232_rx_get() == 0)
#define rs232_rx_is_active()		rs232_rx_is_high()
#define rs232_rx_is_inactive()	rs232_rx_is_low()

// led_red: PB0, mode = OutputPushPull
#define led_red_PORT				GPIOB
#define led_red_PIN				0
#define led_red_MASK				(1 << led_red_PIN)
#define led_red_set_high()		led_red_PORT->BSRR = led_red_MASK
#define led_red_set_low()		led_red_PORT->BRR = led_red_MASK
#define led_red_set_active()		led_red_set_high()
#define led_red_set_inactive()	led_red_set_low()
#define led_red_toggle()			led_red_PORT->ODR ^= led_red_MASK
#define led_red_get()			((led_red_PORT->IDR >> led_red_PIN) & 1)
#define led_red_is_high()		(led_red_get() != 0)
#define led_red_is_low()			(led_red_get() == 0)
#define led_red_is_active()		led_red_is_high()
#define led_red_is_inactive()	led_red_is_low()

// led_orange: PB1, mode = OutputPushPull
#define led_orange_PORT				GPIOB
#define led_orange_PIN				1
#define led_orange_MASK				(1 << led_orange_PIN)
#define led_orange_set_high()		led_orange_PORT->BSRR = led_orange_MASK
#define led_orange_set_low()		led_orange_PORT->BRR = led_orange_MASK
#define led_orange_set_active()		led_orange_set_high()
#define led_orange_set_inactive()	led_orange_set_low()
#define led_orange_toggle()			led_orange_PORT->ODR ^= led_orange_MASK
#define led_orange_get()			((led_orange_PORT->IDR >> led_orange_PIN) & 1)
#define led_orange_is_high()		(led_orange_get() != 0)
#define led_orange_is_low()			(led_orange_get() == 0)
#define led_orange_is_active()		led_orange_is_high()
#define led_orange_is_inactive()	led_orange_is_low()

// led_green: PB2, mode = OutputPushPull
#define led_green_PORT				GPIOB
#define led_green_PIN				2
#define led_green_MASK				(1 << led_green_PIN)
#define led_green_set_high()		led_green_PORT->BSRR = led_green_MASK
#define led_green_set_low()		led_green_PORT->BRR = led_green_MASK
#define led_green_set_active()		led_green_set_high()
#define led_green_set_inactive()	led_green_set_low()
#define led_green_toggle()			led_green_PORT->ODR ^= led_green_MASK
#define led_green_get()			((led_green_PORT->IDR >> led_green_PIN) & 1)
#define led_green_is_high()		(led_green_get() != 0)
#define led_green_is_low()			(led_green_get() == 0)
#define led_green_is_active()		led_green_is_high()
#define led_green_is_inactive()	led_green_is_low()


void default_fault_handler(void);
void early_system_init(void);

#endif
